{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext, useEffect, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport AppLoading from 'expo-app-loading';\nimport LoginScreen from \"./screens/LoginScreen\";\nimport SignupScreen from \"./screens/SignupScreen\";\nimport WelcomeScreen from \"./screens/WelcomeScreen\";\nimport DonorScreen from \"./screens/DonorScreen\";\nimport ClientScreen from \"./screens/ClientScreen\";\nimport { Colors } from \"./constants/styles\";\nimport AuthContextProvider, { AuthContext } from \"./store/auth-context\";\nimport IconButton from \"./components/ui/IconButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\n\nfunction AuthStack() {\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerStyle: {\n        backgroundColor: Colors.primary500\n      },\n      headerTintColor: 'white',\n      contentStyle: {\n        backgroundColor: Colors.primary100\n      }\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"Login\",\n      component: LoginScreen\n    }), _jsx(Stack.Screen, {\n      name: \"Signup\",\n      component: SignupScreen\n    })]\n  });\n}\n\nfunction AuthenticatedStack() {\n  var authCtx = useContext(AuthContext);\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerStyle: {\n        backgroundColor: Colors.primary500\n      },\n      headerTintColor: 'white',\n      contentStyle: {\n        backgroundColor: Colors.primary100\n      }\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"Welcome\",\n      component: WelcomeScreen,\n      options: {\n        headerRight: function headerRight(_ref) {\n          var tintColor = _ref.tintColor;\n          return _jsx(IconButton, {\n            icon: \"exit\",\n            color: tintColor,\n            size: 26,\n            onPress: authCtx.logout\n          });\n        }\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"DonorScreen\",\n      component: DonorScreen\n    }), _jsx(Stack.Screen, {\n      name: \"ClientScreen\",\n      component: ClientScreen\n    })]\n  });\n}\n\nfunction Navigation() {\n  var authCtx = useContext(AuthContext);\n  return _jsxs(NavigationContainer, {\n    children: [!authCtx.isAuthenticated && _jsx(AuthStack, {}), authCtx.isAuthenticated && _jsx(AuthenticatedStack, {})]\n  });\n}\n\nfunction Root() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isTryingLogin = _useState2[0],\n      setIsTryingLogin = _useState2[1];\n\n  var authCtx = useContext(AuthContext);\n  useEffect(function () {\n    function fetchToken() {\n      var storedToken;\n      return _regeneratorRuntime.async(function fetchToken$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('token'));\n\n            case 2:\n              storedToken = _context.sent;\n\n              if (storedToken) {\n                authCtx.authenticate(storedToken);\n              }\n\n              setIsTryingLogin(false);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchToken();\n  }, []);\n\n  if (isTryingLogin) {\n    return _jsx(AppLoading, {});\n  }\n\n  return _jsx(Navigation, {});\n}\n\nexport default function App() {\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: \"light\"\n    }), _jsx(AuthContextProvider, {\n      children: _jsx(Root, {})\n    })]\n  });\n}","map":{"version":3,"names":["useContext","useEffect","useState","NavigationContainer","createNativeStackNavigator","StatusBar","AsyncStorage","AppLoading","LoginScreen","SignupScreen","WelcomeScreen","DonorScreen","ClientScreen","Colors","AuthContextProvider","AuthContext","IconButton","Stack","AuthStack","headerStyle","backgroundColor","primary500","headerTintColor","contentStyle","primary100","AuthenticatedStack","authCtx","headerRight","tintColor","logout","Navigation","isAuthenticated","Root","isTryingLogin","setIsTryingLogin","fetchToken","getItem","storedToken","authenticate","App"],"sources":["C:/Users/yaniv/Desktop/react-native-project/App.js"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport AppLoading from 'expo-app-loading';\n\nimport LoginScreen from './screens/LoginScreen';\nimport SignupScreen from './screens/SignupScreen';\nimport WelcomeScreen from './screens/WelcomeScreen';\nimport DonorScreen from './screens/DonorScreen';\nimport ClientScreen from './screens/ClientScreen';\nimport { Colors } from './constants/styles';\nimport AuthContextProvider, { AuthContext } from './store/auth-context';\nimport IconButton from './components/ui/IconButton';\n\nconst Stack = createNativeStackNavigator();\n\nfunction AuthStack() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: { backgroundColor: Colors.primary500 },\n        headerTintColor: 'white',\n        contentStyle: { backgroundColor: Colors.primary100 },\n      }}\n    >\n      <Stack.Screen name=\"Login\" component={LoginScreen} />\n      <Stack.Screen name=\"Signup\" component={SignupScreen} />\n    </Stack.Navigator>\n  );\n}\n\nfunction AuthenticatedStack() {\n  const authCtx = useContext(AuthContext);\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: { backgroundColor: Colors.primary500 },\n        headerTintColor: 'white',\n        contentStyle: { backgroundColor: Colors.primary100 },\n      }}\n    >\n      <Stack.Screen\n        name=\"Welcome\"\n        component={WelcomeScreen}\n        options={{\n          headerRight: ({ tintColor }) => (\n            <IconButton\n              icon=\"exit\"\n              color={tintColor}\n              size={26}\n              onPress={authCtx.logout}\n            />\n            \n            \n          ),\n          \n        }}\n      />\n      <Stack.Screen name=\"DonorScreen\" component={DonorScreen}/>\n      <Stack.Screen name=\"ClientScreen\" component={ClientScreen}/>\n    </Stack.Navigator>\n  );\n}\n\nfunction Navigation() {\n  const authCtx = useContext(AuthContext);\n\n  return (\n    <NavigationContainer>\n      {!authCtx.isAuthenticated && <AuthStack />}\n      {authCtx.isAuthenticated && <AuthenticatedStack />}\n    </NavigationContainer>\n  );\n}\n\nfunction Root() {\n  const [isTryingLogin, setIsTryingLogin] = useState(true);\n\n  const authCtx = useContext(AuthContext);\n\n  useEffect(() => {\n    async function fetchToken() {\n      const storedToken = await AsyncStorage.getItem('token');\n\n      if (storedToken) {\n        authCtx.authenticate(storedToken);\n      }\n\n      setIsTryingLogin(false);\n    }\n\n    fetchToken();\n  }, []);\n\n  if (isTryingLogin) {\n    return <AppLoading />;\n  }\n\n  return <Navigation />;\n}\n\nexport default function App() {\n  \n  return (\n    <>\n      <StatusBar style=\"light\" />\n      <AuthContextProvider>\n        <Root />\n      </AuthContextProvider>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}